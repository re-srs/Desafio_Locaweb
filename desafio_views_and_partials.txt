 spec/models/opinion_spec.rb
require 'rails_helper'

RSpec.describe Opinion, type: :model do
  #pending "add some examples to (or delete) #{__FILE__}"
end
 db/schema.rb
# encoding: UTF-8
# This file is auto-generated from the current state of the database. Instead
# of editing this file, please use the migrations feature of Active Record to
# incrementally modify your database, and then regenerate this schema definition.
#
# Note that this schema.rb definition is the authoritative source for your
# database schema. If you need to create the application database on another
# system, you should be using db:schema:load, not running all the migrations
# from scratch. The latter is a flawed and unsustainable approach (the more migrations
# you'll amass, the slower it'll run and the greater likelihood for issues).
#
# It's strongly recommended that you check this file into your version control system.

ActiveRecord::Schema.define(version: 20161028124325) do

  create_table "opinions", force: :cascade do |t|
    t.string   "body"
    t.datetime "created_at", null: false
    t.datetime "updated_at", null: false
  end

end
 config/routes.rb
Rails.application.routes.draw do
  get '/', to: 'welcome#index'
  resources :opinions, only: [:new, :create, :show, :index]
  root to: 'welcome#index'
  
end
 app/views/welcome/index.html.erb
<h1>Bem vindo a Thinking App</h1>
 <% @opinions.each do |e| %>
	<li><%= e.body %></li>
 <% end %>
 app/views/opinions/new.html.erb

<%= form_for :opinion, url: opinions_path do |f| %>

  <%= f.label :body %>
  <%= f.text_field :body %>
  <%= f.submit 'Create an option' %>
<% end %>
 app/views/opinions/index.html.erb
<h1>Bem vindo a Thinking App</h1>
 <% @opinions.each do |e| %>
	<li><%= e.body %></li>
 <% end %>
 app/models/opinion.rb
class Opinion < ActiveRecord::Base
end
 app/controllers/welcome_controller.rb
class WelcomeController < ApplicationController
  def index
   @opinions = Opinion.all
  end
end
 app/controllers/opinions_controller.rb
class OpinionsController < ApplicationController
 def index
	@opinions = Opinion.all
 end
  def show
    @opinion = Opinion.find(params[:id])
  end

  def new
    
  end

  def create #metodo criar
	@opinion = Opinion.new(opinion_params)
	
	#salva opiniao
	if @opinion.save
	redirect_to @opinion
	else
	 render 'new'
	end
	
  end
    
  private
   def opinion_params
    params.require(:opinion).permit(:body)
   end	
 
end