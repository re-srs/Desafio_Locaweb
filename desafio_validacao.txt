 spec/models/opinion_spec.rb
require 'rails_helper'

describe Opinion do
  it 'persists a new opinion' do
    body = "Rails is awesome!"
    opinion = Opinion.create(body: body)

    expect(opinion).to be_persisted
    expect(opinion.body).to eq body
  end

  it 'should not allow political words' do
    body = "Petralha Tucanos Dilma"
    opinion = Opinion.new(body: body)

   expect(opinion).to_not be_valid
   expect(opinion.errors[:body]).to include "Contains political words"
  end

  it 'is invalid when has no body' do
    body = ''
    opinion = Opinion.new(body: body)

    expect(opinion).to_not be_valid
    expect(opinion.errors[:body]).to include 'can\'t be blank'
  end

  it 'is invalid when has more than 150 caracters' do
    body = 'a' * 151
    opinion = Opinion.new(body: body)

    expect(opinion).to_not be_valid
    expect(opinion.errors[:body]).to include 'is too long'
 end
end
 db/schema.rb
# encoding: UTF-8
# This file is auto-generated from the current state of the database. Instead
# of editing this file, please use the migrations feature of Active Record to
# incrementally modify your database, and then regenerate this schema definition.
#
# Note that this schema.rb definition is the authoritative source for your
# database schema. If you need to create the application database on another
# system, you should be using db:schema:load, not running all the migrations
# from scratch. The latter is a flawed and unsustainable approach (the more migrations
# you'll amass, the slower it'll run and the greater likelihood for issues).
#
# It's strongly recommended that you check this file into your version control system.

ActiveRecord::Schema.define(version: 20150428030546) do

  create_table "opinions", force: :cascade do |t|
    t.string "body"
  end

end
 app/models/opinion.rb
class Opinion < ActiveRecord::Base
   
     
 validates :body, exclusion: {in: ["Petralha Tucanos Dilma"], message: "Contains political words"}
 validates_presence_of :body, message: 'can\'t be blank'
 validates_length_of :body, maximum: 150, message: 'is too long'
 
end