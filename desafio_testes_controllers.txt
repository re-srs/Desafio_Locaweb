 spec/controllers/challenges_controller_spec.rb
require 'rails_helper'

describe ChallengesController, type: :controller do
  it 'creates a challenge with valid params' do
    #pending 'implemente seu teste'
	#challenge = Challenge.new
	#expect(challenge.valid?).to eq false
	post :create, :challenge=>{name: "Renata", description:"Quero ser Dev", code_points:30}
	expect(response).to redirect_to challenge_path(1)
  end

  it 'render new when invalid params' do
    #pending 'implemente seu teste'
	#get: new
	#challenge = Challenge.new
	#expect(challenge.valid?).to eq false
	post:create, :challenge=>{name: "Renata", description:"Quero ser Dev", code_points:'30blabla'}
	expect(response).to render_template("new")
  end

  # experimente criar outros cenarios se achar interessante ;)
  # na primeira solução acho que entendi errado, vendo as demais soluções
  # e lendo um pouco mais, deu uma clareada na idéia.
  
end
 db/schema.rb
# encoding: UTF-8
# This file is auto-generated from the current state of the database. Instead
# of editing this file, please use the migrations feature of Active Record to
# incrementally modify your database, and then regenerate this schema definition.
#
# Note that this schema.rb definition is the authoritative source for your
# database schema. If you need to create the application database on another
# system, you should be using db:schema:load, not running all the migrations
# from scratch. The latter is a flawed and unsustainable approach (the more migrations
# you'll amass, the slower it'll run and the greater likelihood for issues).
#
# It's strongly recommended that you check this file into your version control system.

ActiveRecord::Schema.define(version: 20161023014738) do

  create_table "challenges", force: :cascade do |t|
    t.string   "name"
    t.integer  "code_points"
    t.string   "description"
    t.string   "repo_name"
    t.datetime "created_at",  null: false
    t.datetime "updated_at",  null: false
  end

end